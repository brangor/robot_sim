// src/__tests__/integration/index.test.ts
import fs from "fs";
import path from "path";

import type { TestDataType } from "../../types/Types";

describe('Robot Simulation', () => {
  let outputData: string;
	let testData: TestDataType[];
  const dataPath = path.join(__dirname, "data", "commandTestData.json");

  beforeAll(async () => {
    try {
      const fileContents = await fs.promises.readFile(dataPath, "utf-8");
      testData = JSON.parse(fileContents) as TestDataType[];
    } catch (error) {
      console.error(`Error reading test data: ${error}`);
    }
  });

  beforeEach(() => {
		outputData = "";
    jest.spyOn(console, "log").mockImplementation((message) => {
			outputData += message + "\n";
		});
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

	test("Process commands and validate outputs", async () => {
    // Ensure testData is loaded
    expect(testData).toBeDefined();
    expect(testData.length).toBeGreaterThan(0);

    for (const testCase of testData) {
      const { description, commands, expectedOutput } = testCase;

      process.stdout.write(`Running test case: ${description}`);

			process.stdout.write('commands',commands);
      // Process each command
			for (const command of commands) {
				process.stdout.write('about to process ',command);
				await processCommand(command);
			}

			expect(outputData).toContain(expectedOutput);
    }
  });
});

const processCommand = (command: string) => new Promise<void>((resolve) => {
	process.stdin.emit('data', `${command}\n`);
	resolve();
});
